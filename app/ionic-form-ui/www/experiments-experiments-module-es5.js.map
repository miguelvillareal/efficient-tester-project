{"version":3,"sources":["webpack:///src/app/experiments/experiments.page.scss","webpack:///src/app/experiments/experiments.page.ts","webpack:///src/app/experiments/experiments.module.ts","webpack:///src/app/experiments/experiments.page.html","webpack:///src/app/experiments/experiments-routing.module.ts"],"names":["ExperimentsPage","storageService","plt","ApiService","toastController","authService","router","inAppBrowser","expCredentials","name","items","displayList","displayListTwo","newItem","ready","then","loadItems","property","a","b","networkConnected","showLoading","console","log","experimentToCreate","createExperiment","subscribe","res","stopLoading","showError","item","create","protocol_used","id","selectedItem","redirect","value","getExperiments","index","currentItem","loadedItem","push","sort","sortByValue","selector","template","ExperimentsPageModule","imports","declarations","routes","path","component","ExperimentsPageRoutingModule","forChild","exports"],"mappings":"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","file":"experiments-experiments-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJleHBlcmltZW50cy5wYWdlLnNjc3MifQ== */\";","import { AuthenticationService } from 'src/app/services/authentication.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Platform, ToastController, IonList} from '@ionic/angular';\nimport { StorageService, Item } from 'src/app/services/storage.service';\nimport { ApiDjangoService } from '../services/api-django.service';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport {myID} from 'src/app/services/authentication.service';\nimport {protocolID} from 'src/app/protocols/protocols.page';\n\n@Component({\n  selector: 'app-experiments',\n  templateUrl: './experiments.page.html',\n  styleUrls: ['./experiments.page.scss'],\n})\nexport class ExperimentsPage implements OnInit {\n  expCredentials = { name: ''};\n  \n  selectedItem?: Item;\n\n  infoAboutMe : any;\n\n  items: Item[] = [];\n\n  displayList: Item[] = [];\n\n  displayListTwo: Item[] = [];\n\n  newItem: Item = <Item>{};\n\n  @ViewChild('mylist') mylist: IonList;\n\n  constructor(private storageService: StorageService, \n    private plt: Platform,\n    private ApiService: ApiDjangoService, \n    private toastController: ToastController, \n    private authService: AuthenticationService, \n    private router: Router,\n    private inAppBrowser: InAppBrowser) {\n     \n    this.plt.ready().then(() => {\n      this.loadItems(\"step_num\");\n    });\n    \n  }\n\n  sortByValue(property){\n    return function(a,b){  \n      if(a[property] > b[property])  \n         return 1;  \n      else if(a[property] < b[property])  \n         return -1;  \n  \n      return 0;  \n   } \n  }\n\n  addExperiment(){\n    if (this.ApiService.networkConnected) {\n      this.ApiService.showLoading();\n              console.log(myID);\n              let experimentToCreate = {\n                \"name\":this.expCredentials.name,\n                \"user_notes\": '{}',\n                \"step_num\": 1,\n                \"protocol_used\": protocolID,\n                \"current_interaction\": '{}'\n              }\n\n              this.ApiService.createExperiment(experimentToCreate).subscribe((res) => {\n                if (res) {\n                  console.log(res)\n                  this.loadItems(\"step_num\");\n                }\n                else {\n                  this.ApiService.stopLoading();\n                  this.ApiService.showError(\"An error occured while creating a Experiment\")\n                }\n              });\n\n            //}\n            //else{\n            //  this.ApiService.showError(\"A Protocol already exists for this name and positive rate!\");\n            //}\n          //}\n          //else {\n            \n          //  this.ApiService.showError(\"An error occured while registering\")\n         \n          //}\n      //});\n    }\n  }\n  refreshPage(){\n    this.loadItems(\"step_num\");\n  }\n  \n  redirect(item) {\n    this.inAppBrowser.create(\"http://54.90.175.110:8000/imageInteraction/?id=\" + item.protocol_used + \"&exp=\" +item.id + \"&userid=\" + myID);\n   }\n  \n  onSelect(item: Item): void {\n    this.selectedItem = item;\n    console.log(item)\n\t  this.redirect(item);\n  }\n\n  loadItems(value){\n    this.displayList = [];\n    this.ApiService.getExperiments().subscribe(items => {\n      for (let index in items[\"results\"]){\n        let currentItem = items[\"results\"][index][\"protocol_used\"];\n        let loadedItem = items[\"results\"][index][\"completed_status\"];\n\t\t \t  if(currentItem == protocolID){\n          console.log(currentItem)\n          if(loadedItem == \"False\"){\n            this.displayList.push(items[\"results\"][index]);\n            this.displayList.sort(this.sortByValue(value));\n          }\n          else{\n            this.displayListTwo.push(items[\"results\"][index]);\n            this.displayListTwo.sort(this.sortByValue(value));\n          }\n        }\n    }\n    console.log(this.displayList)\n\t  //console.log(items[\"results\"][3][\"protocol_used\"]);\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ExperimentsPageRoutingModule } from './experiments-routing.module';\n\nimport { ExperimentsPage } from './experiments.page';\n\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ExperimentsPageRoutingModule\n  ],\n  declarations: [ExperimentsPage]\n})\nexport class ExperimentsPageModule {}\n","export default \"  <ion-header>\\n    <ion-toolbar>\\n      <ion-title>Experiments</ion-title>\\n      <ion-buttons slot=\\\"start\\\">\\n        <ion-menu-button menu=\\\"main-menu\\\"></ion-menu-button>\\n      </ion-buttons>\\n    </ion-toolbar>\\n  </ion-header>\\n\\n  <ion-content>\\n    <form (ngSubmit)=\\\"addExperiment()\\\" #registerForm=\\\"ngForm\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Name</ion-label>\\n        <ion-input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"expCredentials.name\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-button expand=\\\"full\\\" type=\\\"submit\\\" >Create experiment!</ion-button>\\n    </form>\\n    <button (click)=\\\"refreshPage()\\\">Refresh Page(Click after save or done with experiment)</button>\\n    <ion-item>\\n      <ion-label>Sort By</ion-label>\\n      <ion-select  [(ngModel)]= \\\"sortBy\\\" (ionChange) = \\\"loadItems(sortBy)\\\" okText=\\\"Okay\\\" cancelText=\\\"Dismiss\\\">\\n        <ion-select-option   value=\\\"name\\\">Name</ion-select-option>\\n        <ion-select-option   value=\\\"step_num\\\">Step Number</ion-select-option>\\n        <ion-select-option   value=\\\"date_last_accessed\\\">Date Last Used</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <ion-list #mylist>\\n\\n      <ion-list-header>\\n        <ion-label>My Experiments</ion-label>\\n      </ion-list-header>\\n\\n      <ion-item-sliding *ngFor=\\\"let item of displayList\\\" (click)=\\\"onSelect(item)\\\">\\n\\n        <ion-item>\\n          <ion-label text-wrap>\\n            <h3>Name: {{ item.name }}</h3>\\n            <h3>Step Number: {{ item.step_num }}</h3>\\n            <h3>Protocol ID Used: {{ item.protocol_used }}</h3>\\n            <ion-text color=\\\"secondary\\\">\\n             <!-- <p>Notes: {{ item.user_notes}}</p>-->\\n            </ion-text>\\n            <p>{{ item.modified | date:'short'}}</p>\\n          </ion-label>\\n        </ion-item>\\n\\n        <ion-item-options side=\\\"end\\\">\\n          <ion-item-option color=\\\"secondary\\\" (click)=\\\"deleteItem(item)\\\">Delete</ion-item-option>\\n        </ion-item-options>\\n      </ion-item-sliding>\\n\\n      <h3>\\n        Completed Experiments\\n      </h3>\\n\\n      <ion-item-sliding *ngFor=\\\"let item of displayListTwo\\\" (click)=\\\"onSelect(item)\\\">\\n\\n        <ion-item>\\n          <ion-label text-wrap>\\n            <h3>Step Number: {{ item.step_num }}</h3>\\n            <h3>Protocol ID Used: {{ item.protocol_used }}</h3>\\n            <ion-text color=\\\"secondary\\\">\\n              <!-- <p>Notes: {{ item.user_notes}}</p>-->\\n            </ion-text>\\n            <p>{{ item.modified | date:'short'}}</p>\\n          </ion-label>\\n        </ion-item>\\n\\n        <ion-item-options side=\\\"end\\\">\\n          <ion-item-option color=\\\"secondary\\\" (click)=\\\"deleteItem(item)\\\">Delete</ion-item-option>\\n        </ion-item-options>\\n      </ion-item-sliding>\\n\\n    </ion-list>\\n\\n  </ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ExperimentsPage } from './experiments.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ExperimentsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ExperimentsPageRoutingModule {}\n"]}